{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","components/SearchFilter/SearchFilter.module.css","components/Container/Container.module.css","redux/contactSlice/contactsActions.js","redux/contactSlice/contactsReducers.js","redux/Auth/auth-operations.js","redux/Auth/auth-slices.js","redux/store.js","redux/Auth/auth-selectors.js","components/UserMenu/UserMenu.jsx","components/AppBar/AuthNav.js","components/AppBar/AppBar.js","components/Container/Container.js","views/HomeView.js","views/RegisterView.js","views/LoginView.js","redux/contactSlice/contactsOperations.js","redux/contactSlice/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/SearchFilter/SearchFilter.jsx","components/Notice/Notice.js","components/ContactList/ContactList.jsx","views/ContactsView.js","components/PrivateRoute/PrivateRoute.jsx","components/PublicRoute/PublicRoute.jsx","App.jsx","index.js"],"names":["module","exports","changeFilter","createAction","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","getContactsRequest","getContactsSuccess","getContactsError","contacts","createReducer","_","payload","state","filter","contact","id","combineReducers","axios","defaults","baseURL","token","headers","common","Authorization","register","createAsyncThunk","credentials","a","rejectWithValue","post","data","logIn","logOut","thunkAPI","fetchCurrentUser","getState","persistedToken","auth","get","operations","authSlice","createSlice","name","initialState","user","email","isLoggedIn","isFetchingCurrentUser","extraReducers","authOperations","fulfilled","action","pending","rejected","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","phonebook","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","styles","container","display","alignItems","avatar","marginRight","fontWeight","button","border","font","cursor","outline","padding","margin","UserMenu","dispatch","useDispatch","userEmail","useSelector","authSelectors","style","type","onClick","link","textDecoration","color","activeLink","AuthNav","to","activeStyle","header","justifyContent","borderBottom","AppBar","exact","memo","Container","children","className","minHeight","marginTop","title","fontSize","textAlign","title2","HomeView","role","form","width","label","flexDirection","marginBottom","backgroundColor","borderRadius","RegisterView","useState","setName","setEmail","password","setPassword","handleChange","target","value","onSubmit","e","preventDefault","autoComplete","onChange","LoginView","then","catch","error","delete","getFilter","getAllContacts","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","number","setNumber","contactsSelectors","event","s","contactform","find","alert","contactsOperations","contactLabel","pattern","required","contactInput1","htmlFor","contactInput","contactBtn","SearchFilter","filterValue","filterSearch","input","Notice","message","ContactList","useEffect","allContacts","visibleContacts","length","list","itemCont","map","item","text","btn","ContactsView","PrivateRoute","redirectTo","routeProps","PublicRoute","restricted","shouldRedirect","App","fallback","path","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.3ff5f3b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactBtn\":\"ContactForm_contactBtn__UwxoL\",\"contactform\":\"ContactForm_contactform__3qQZc\",\"contactLabel\":\"ContactForm_contactLabel__1JL7P\",\"contactInput1\":\"ContactForm_contactInput1__2ip9u\",\"contactInput\":\"ContactForm_contactInput__2RB3W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__wBUks\",\"item\":\"ContactList_item__2d7ox\",\"itemCont\":\"ContactList_itemCont__10UiA\",\"text\":\"ContactList_text__2I4MP\",\"btn\":\"ContactList_btn__3FJsY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"SearchFilter_filter__2OGrz\",\"input\":\"SearchFilter_input__1-fuf\",\"filterSearch\":\"SearchFilter_filterSearch__3spXB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__1-kjH\"};","import { createAction } from '@reduxjs/toolkit';\r\nexport const changeFilter = createAction('contacts/ChangeFilter');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const getContactsRequest = createAction(\r\n  'contacts/getContactsRequest',\r\n);\r\nexport const getContactsSuccess = createAction(\r\n  'contacts/getContactsSuccess',\r\n);\r\nexport const getContactsError = createAction('contacts/getContactsError');","import { createReducer } from \"@reduxjs/toolkit\";\nimport { combineReducers } from 'redux';\nimport {\n  changeFilter,\n  addContactSuccess,\n  deleteContactSuccess,\n  getContactsSuccess,\n} from './contactsActions';\n\n// import { getContacts, addContact, deleteContact } from \"./contactsOperations\";\n\n// const initialState = {\n//   items: [],\n//   filter: \"\",\n// };\n\n// const contactsSlice = createSlice({\n//   name: \"contacts\",\n//   initialState,\n//   reducers: {\n//     //   setContacts: (state, { payload }) => ({ ...state, items: payload }),\n//     //   addContacts: (state, { payload }) => ({\n//     //     ...state,\n//     //     items: [...state.items, payload],\n//     //   }),\n//     //   deleteContacts: (state, { payload }) => ({\n//     //     ...state,\n//     //     items: state.items.filter((contact) => contact.id !== payload),\n//     //   }),\n//     updateFilter: (state, { payload }) => ({ ...state, filter: payload }),\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(getContacts.fulfilled, (state, { payload }) => {\n//         state.items = payload;\n//       })\n//       .addCase(addContact.fulfilled, (state, { payload }) => {\n//         state.items.push(payload);\n//       })\n//       .addCase(deleteContact.fulfilled, (state, { payload }) => {\n//         const idx = state.items.findIndex(\n//           (contact) => contact.id === payload.id\n//         );\n//         state.items.splice(idx, 1);\n//       });\n//   },\n// });\n\n// export const { updateFilter } = contactsSlice.actions;\n\n// export default contactsSlice.reducer;\n\nconst contacts = createReducer([], {\n  [getContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  contacts,\n  filter,\n});\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// axios.defaults.baseURL = 'https://lpj-tasker.herokuapp.com';\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*\r\n * POST @ /users/signup\r\n * body: { name, email, password }\r\n * После успешной регистрации добавляем токен в HTTP-заголовок\r\n */\r\nconst register = createAsyncThunk('auth/register', async (credentials,{rejectWithValue}) => {\r\n  try {\r\n    const { data } = await axios.post('/users/signup', credentials);\r\n    token.set(data.token);\r\n    return data;\r\n  } catch (error) {\r\n    return rejectWithValue(error);\r\n  }\r\n});\r\n\r\n/*\r\n * POST @ /users/login\r\n * body: { email, password }\r\n * После успешного логина добавляем токен в HTTP-заголовок\r\n */\r\nconst logIn = createAsyncThunk('auth/login', async (credentials,{rejectWithValue}) => {\r\n  try {\r\n    const { data } = await axios.post('/users/login', credentials);\r\n    token.set(data.token);\r\n    return data;\r\n  } catch (error) {\r\n    return rejectWithValue(error);\r\n    // TODO: Добавить обработку ошибки error.message\r\n  }\r\n});\r\n\r\n/*\r\n * POST @ /users/logout\r\n * headers: Authorization: Bearer token\r\n * После успешного логаута, удаляем токен из HTTP-заголовка\r\n */\r\nconst logOut = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\r\n  try {\r\n    await axios.post('/users/logout');\r\n    token.unset();\r\n  } catch (error) {\r\n    return thunkAPI.rejectWithValue();\r\n  }\r\n});\r\n/*\r\n * GET @ /users/current\r\n * headers:\r\n *    Authorization: Bearer token\r\n *\r\n * 1. Забираем токен из стейта через getState()\r\n * 2. Если токена нет, выходим не выполняя никаких операций\r\n * 3. Если токен есть, добавляет его в HTTP-заголовок и выполянем операцию\r\n */\r\nconst fetchCurrentUser = createAsyncThunk(\r\n  'auth/refresh',\r\n  async (_, thunkAPI) => {\r\n    const state = thunkAPI.getState();\r\n    const persistedToken = state.auth.token;\r\n\r\n    if (persistedToken === null) {\r\n      // console.log('Токена нет, уходим из fetchCurrentUser');\r\n      return thunkAPI.rejectWithValue();\r\n    }\r\n\r\n    token.set(persistedToken);\r\n    try {\r\n      const { data } = await axios.get('/users/current');\r\n      return data;\r\n    } catch (error) {\r\n      thunkAPI.rejectWithValue();\r\n    }\r\n  },\r\n);\r\n\r\nconst operations = {\r\n  register,\r\n  logOut,\r\n  logIn,\r\n  fetchCurrentUser,\r\n};\r\nexport default operations;\r\n// // eslint-disable-next-line import/no-anonymous-default-export\r\n// export default { register, logIn, logOut, fetchCurrentUser };","import { createSlice } from '@reduxjs/toolkit';\r\nimport authOperations from './auth-operations';\r\n\r\nconst initialState = {\r\n  user: { name: null, email: null },\r\n  token: null,\r\n  isLoggedIn: false,\r\n  isFetchingCurrentUser: false,\r\n};\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  extraReducers: {\r\n    [authOperations.register.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.logIn.fulfilled](state, action) {\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.isLoggedIn = true;\r\n    },\r\n    [authOperations.logOut.fulfilled](state, action) {\r\n      state.user = { name: null, email: null };\r\n      state.token = null;\r\n      state.isLoggedIn = false;\r\n    },\r\n    [authOperations.fetchCurrentUser.pending](state) {\r\n      state.isFetchingCurrentUser = true;\r\n    },\r\n    [authOperations.fetchCurrentUser.fulfilled](state, action) {\r\n      state.user = action.payload;\r\n      state.isLoggedIn = true;\r\n      state.isFetchingCurrentUser = false;\r\n    },\r\n    [authOperations.fetchCurrentUser.rejected](state) {\r\n      state.isFetchingCurrentUser = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport default authSlice.reducer;","import { configureStore } from \"@reduxjs/toolkit\";\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport persistReducer from 'redux-persist/lib/persistReducer';\nimport persistStore from 'redux-persist/lib/persistStore';\n// import logger from \"redux-logger\";\nimport contactsReducer from \"./contactSlice/contactsReducers\";\nimport authReducer from './Auth/auth-slices';\n\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    phonebook: contactsReducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n  //.concat(logger),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport const persistor = persistStore(store);","const getIsLoggedIn = state => state.auth.isLoggedIn;\r\n\r\nconst getUserEmail = state => state.auth.user.name;\r\n\r\nconst getIsFetchingCurrentUser = state => state.auth.isFetchingCurrentUser;\r\n\r\n// const authSelectors = {\r\n//   getIsLoggedIn,\r\n//   getUserEmail,\r\n//   getIsFetchingCurrentUser\r\n// };\r\n// export default authSelectors;\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  getIsLoggedIn,\r\n  getUserEmail,\r\n  getIsFetchingCurrentUser,\r\n};","import { useDispatch, useSelector } from 'react-redux';\r\nimport authSelectors from '../../redux/Auth/auth-selectors';\r\nimport authOperations from '../../redux/Auth/auth-operations';\r\n\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    marginRight: 4,\r\n  },\r\n  name: {\r\n    fontWeight: 700,\r\n    marginRight: 12,\r\n  },\r\n  button: {\r\n  display: 'block',\r\n  border: 'none',\r\n  font: 'inherit',\r\n  cursor: 'pointer',\r\n  outline: 'none',\r\n  padding: '3px 15px',\r\n  margin:'auto',\r\n  // eslint-disable-next-line no-dupe-keys\r\n  border: '1px solid #06196eab',\r\n  color: 'black',\r\n  borderRadius: 5,\r\n  },\r\n};\r\n\r\nexport default function UserMenu() {\r\n  const dispatch = useDispatch();\r\n  const userEmail  = useSelector(authSelectors.getUserEmail);\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <span style={styles.name}>Добро пожаловать, {userEmail }</span>\r\n      <button type=\"submit\" style={styles.button} onClick={() => dispatch(authOperations.logOut())}>\r\n        Выйти\r\n      </button>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nexport default function AuthNav() {\r\n  return (\r\n    <div>\r\n      <NavLink\r\n        to=\"/register\"\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Регистрация\r\n      </NavLink>\r\n      <NavLink\r\n        to=\"/login\"\r\n        style={styles.link}\r\n        activeStyle={styles.activeLink}\r\n      >\r\n        Логин\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}","import { memo } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport UserMenu from '../UserMenu/UserMenu';\r\nimport AuthNav from './AuthNav';\r\nimport authSelectors  from '../../redux/Auth/auth-selectors';\r\n\r\nconst styles = {\r\n  header: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    borderBottom: '1px solid #2A363B',\r\n    \r\n  },\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#E84A5F',\r\n  },\r\n};\r\n\r\nfunction AppBar() {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <header style={styles.header}>\r\n      <nav>\r\n    <NavLink to=\"/\" exact style={styles.link} activeStyle={styles.activeLink}>\r\n      Главная\r\n    </NavLink>\r\n        \r\n    {isLoggedIn && (\r\n    <NavLink to=\"/contacts\" style={styles.link} activeStyle={styles.activeLink}>\r\n      Контакты\r\n    </NavLink>\r\n        )}\r\n      </nav>\r\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n};\r\nexport default memo(AppBar);","import styles from './Container.module.css';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Container({ children }) {\r\n  return <div className={styles.container}>{children}</div>;\r\n}\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst styles = {\r\n  container: {\r\n    minHeight: 'calc(100vh - 50px)',\r\n    // display: 'flex',\r\n    alignItems: 'center',\r\n    // justifyContent: 'center',\r\n     marginTop: 70,\r\n  },\r\n  title: {\r\n    fontWeight: 500,\r\n    fontSize: 48,\r\n    textAlign: 'center',\r\n  },\r\n  title2: {\r\n    fontWeight: 400,\r\n    fontSize: 36,\r\n    textAlign: 'center',\r\n    marginTop: 70,\r\n  }\r\n};\r\n\r\nconst HomeView = () => (\r\n  <div style={styles.container}>\r\n    <h1 style={styles.title}>\r\n      Создайте свою <br/>телефонную книгу <br/>\r\n      {' '}\r\n      <span role=\"img\" aria-label=\"Иконка приветствия\">\r\n        📝\r\n      </span>\r\n       <p style={styles.title2}>\r\n        Чтобы воспользоваться нашим сервисом, <br/><NavLink to=\"/register\">Зарегистрируйтесь</NavLink> <br/> или{' '}\r\n        <NavLink to=\"/login\">Войдите</NavLink> <br/>в ваш аккаунт.\r\n      </p>\r\n    </h1>\r\n  </div>\r\n);\r\n\r\nexport default HomeView;","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport authOperations  from '../redux/Auth/auth-operations';\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 320,\r\n    margin: 'auto',\r\n  },\r\n  label: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 15,\r\n  },\r\n  button: {\r\n  display: 'block',\r\n  border: 'none',\r\n  font: 'inherit',\r\n  cursor: 'pointer',\r\n  outline: 'none',\r\n    padding: '8px 24px',\r\n  margin:'auto',\r\n  backgroundColor: '#06196eab',\r\n  color: 'white',\r\n  borderRadius: 5,\r\n  },\r\n};\r\n\r\nexport default function RegisterView() {\r\n  const dispatch = useDispatch();\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'name':\r\n        return setName(value);\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.register({ name, email, password }));\r\n    setName('');\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница регистрации</h1>\r\n      <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\r\n        <label style={styles.label}>\r\n          Имя\r\n          <input type=\"text\" name=\"name\" value={name} onChange={handleChange} />\r\n        </label>\r\n\r\n        <label style={styles.label}>\r\n          Почта\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label style={styles.label}>\r\n          Пароль\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" style={styles.button}>Зарегистрироваться</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};","import { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport authOperations  from '../redux/Auth/auth-operations';\r\n\r\nconst styles = {\r\n  form: {\r\n    width: 320,\r\n    margin: 'auto',\r\n  },\r\n  label: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    marginBottom: 15,\r\n  },\r\n    button: {\r\n  display: 'block',\r\n  border: 'none',\r\n  font: 'inherit',\r\n  cursor: 'pointer',\r\n  outline: 'none',\r\n    padding: '8px 24px',\r\n  margin:'auto',\r\n  backgroundColor: '#06196eab',\r\n  color: 'white',\r\n  borderRadius: 5,\r\n  },\r\n};\r\n\r\nexport default function LoginView() {\r\n  const dispatch = useDispatch();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n      case 'email':\r\n        return setEmail(value);\r\n      case 'password':\r\n        return setPassword(value);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.logIn({ email, password }));\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Страница логина</h1>\r\n\r\n      <form onSubmit={handleSubmit} style={styles.form} autoComplete=\"off\">\r\n        <label style={styles.label}>\r\n          Почта\r\n          <input\r\n            type=\"email\"\r\n            name=\"email\"\r\n            value={email}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label style={styles.label}>\r\n          Пароль\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" style={styles.button}>Войти</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  getContactsRequest,\n  getContactsSuccess,\n  getContactsError,\n} from './contactsActions';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\nconst getContacts = () => dispatch => {\n  dispatch(getContactsRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => {\n      dispatch(getContactsSuccess(data));\n    })\n    .catch(error => dispatch(getContactsError(error)));\n};\n\nconst addContact = contact => dispatch => {\n  dispatch(addContactRequest());\n\n  axios\n    .post('/contacts', contact)\n    .then(({ data }) => {\n      dispatch(addContactSuccess(data));\n    })\n    .catch(error => dispatch(addContactError(error)));\n};\n\nconst deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => {\n      dispatch(deleteContactSuccess(id));\n    })\n    .catch(error => dispatch(deleteContactError(error)));\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContact, deleteContact, getContacts };\n\n// import { createAsyncThunk } from \"@reduxjs/toolkit\";\n// import * as api from \"../../services/api\";\n\n// const API_ENDPOINT = \"contacts\";\n\n// const getContacts = createAsyncThunk(\"contacts/getContactsStatus\", () =>\n//   api.getData(API_ENDPOINT)\n// );\n\n// const addContact = createAsyncThunk(\"contacts/addContactStatus\", (newContact) =>\n//   api.saveItem(API_ENDPOINT, newContact)\n// );\n\n// const deleteContact = createAsyncThunk(\"contacts/deleteContactStatus\", (id) =>\n//   api.deleteItem(API_ENDPOINT, id)\n// );\n\n// export { getContacts, addContact, deleteContact };\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getFilter = (state) => state.phonebook.filter;\n\nconst getAllContacts = (state) => state.phonebook.contacts;\n\nconst getVisibleContacts = createSelector(\n  [getAllContacts, getFilter],\n\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { getAllContacts, getFilter, getVisibleContacts };\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\n// import PropTypes from \"prop-types\";\nimport contactsOperations from '../../redux/contactSlice/contactsOperations';\nimport contactsSelectors from '../../redux/contactSlice/contactsSelectors';\nimport s from \"./ContactForm.module.css\";\n\n\nconst ContactForm = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\nconst contacts = useSelector(state=>contactsSelectors.getAllContacts(state));\n  const dispatch = useDispatch();\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n      case \"number\":\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n   const reset = () => {\n    setName('');\n    setNumber('');\n  }; \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    contacts.find(contact => contact.name.toLowerCase() === name.toLowerCase())\n      ? alert(`${name} is already in contacts`)\n      : dispatch(contactsOperations.addContact({ name, number }));\n    reset();\n  };\n\n  return (\n    <div className={s.contactform}>\n      <form onSubmit={handleSubmit}>\n        <label className={s.contactLabel}>\n          Name :\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleChange}\n            className={s.contactInput1}\n          />\n        </label>\n        <label htmlFor=\"\" className={s.contactLabel}>\n          Number :\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleChange}\n            className={s.contactInput}\n          />\n        </label>\n        <button type=\"submit\" className={s.contactBtn}>\n          Add contact\n        </button>\n      </form>\n    </div>\n  );\n};\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\nexport default ContactForm;\n","import { useDispatch, useSelector } from 'react-redux';\nimport contactsSelectors from '../../redux/contactSlice/contactsSelectors';\nimport { changeFilter } from '../../redux/contactSlice/contactsActions';\nimport s from \"./SearchFilter.module.css\";\n\nfunction SearchFilter () {\n  const filterValue = useSelector(state => contactsSelectors.getFilter(state));\n  const dispatch = useDispatch(); \n\n  return (\n    <div className={s.filterSearch}>\n    <label className={s.filter}>\n      Find contacts by name:\n      <input\n        type=\"text\"\n        name=\"filter\"\n        value={filterValue}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n        className={s.input}\n      />\n    </label>\n    </div>\n  )\n};\n\nexport default SearchFilter;\n","import PropTypes from \"prop-types\";\r\n\r\nexport default function Notice({ message }) {\r\n  return <h3>{message}</h3>;\r\n};\r\n\r\nNotice.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};","import PropTypes from \"prop-types\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Fragment, useEffect} from 'react';\nimport contactsOperations from '../../redux/contactSlice/contactsOperations';\nimport contactsSelectors from '../../redux/contactSlice/contactsSelectors';\nimport SearchFilter from '../SearchFilter/SearchFilter';\nimport Notice from '../Notice/Notice'\nimport s from \"./ContactList.module.css\";\n\nconst ContactList = () => { \n  const dispatch = useDispatch();\n  \n   useEffect(() => {\n    dispatch(contactsOperations.getContacts());\n   }, [dispatch]);\n  \n   const allContacts = useSelector(state =>\n    contactsSelectors.getAllContacts(state),\n  );\n\n  const visibleContacts = useSelector(state =>\n    contactsSelectors.getVisibleContacts(state),\n  );\n  // const handleDeleteBtn = (event) => {\n  //   const { name } = event.target;\n  //   onClick(name);\n  // };\n  return (\n    <div>\n      <h2>Contacts</h2>\n      {allContacts.length > 0 ? (\n        <Fragment>\n          <SearchFilter />\n          <ul className={s.list}>\n            {visibleContacts.length === 0 ? (\n              <li className={s.itemCont}>\n                <h4>Контакт с таким именем не найден</h4>\n              </li>\n            ):(\n            visibleContacts.map(({ id, name, number }) => (\n              <li key={id} className={s.item}>\n                <p className={s.text}>{name} :</p>\n                <p className={s.text}>{number} </p>\n\n                <button\n                  type=\"button\"\n                  name={id}\n                  onClick={() =>\n                      dispatch(contactsOperations.deleteContact(id))}\n                  className={s.btn}\n                >\n                  Delete\n                </button>\n              </li>\n            ))\n      )}\n          </ul>\n        </Fragment>\n      ) : (\n          <Notice message=\"Список контактов пустой\" />\n      )}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default ContactList;\n","import ContactForm from '../components/ContactForm/ContactForm';\r\nimport ContactList from '../components/ContactList/ContactList';\r\n\r\nexport default function ContactsView() {\r\n  return (\r\n    <div>\r\n       <h1>Phonebook</h1>\r\n      <ContactForm />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}","import { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport authSelectors from '../../redux/Auth/auth-selectors';\r\n\r\nexport default function PrivateRoute({\r\n  children,\r\n  redirectTo = '/',\r\n  ...routeProps\r\n}) {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isLoggedIn ? children : <Redirect to={redirectTo} />}\r\n    </Route>\r\n  );\r\n}","import { useSelector } from 'react-redux';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport authSelectors from '../../redux/Auth/auth-selectors';\r\n\r\nexport default function PublicRoute({\r\n  children,\r\n  restricted = false,\r\n  redirectTo = '/',\r\n  ...routeProps\r\n}) {\r\n  const isLoggedIn = useSelector(authSelectors.getIsLoggedIn);\r\n  const shouldRedirect = isLoggedIn && restricted;\r\n  return (\r\n    <Route {...routeProps}>\r\n      {shouldRedirect ? <Redirect to={redirectTo} /> : children}\r\n    </Route>\r\n  );\r\n}","import { useEffect } from 'react';\nimport { useDispatch,useSelector  } from 'react-redux';\nimport { Switch} from 'react-router-dom';\nimport { Fragment, Suspense } from 'react';\n\nimport AppBar from './components/AppBar/AppBar';\nimport Container from './components/Container/Container';\n\nimport HomeView from './views/HomeView';\nimport RegisterView from './views/RegisterView';\nimport LoginView from './views/LoginView';\nimport ContactsView from './views/ContactsView';\nimport PrivateRoute from './components/PrivateRoute/PrivateRoute';\nimport PublicRoute from './components/PublicRoute/PublicRoute';\n\nimport authOperations from './redux/Auth/auth-operations';\nimport authSelectors from './redux/Auth/auth-selectors'\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n  const isFetchingCurrentUser = useSelector(\n    authSelectors.getIsFetchingCurrentUser,\n  );\n\n  useEffect(() => {\n    dispatch(authOperations.fetchCurrentUser());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      {isFetchingCurrentUser ? (\n        <h2>loading...</h2>\n      ) : (\n        <Fragment>\n          <AppBar />\n\n          <Switch fallback={<h3>Loading...</h3>}>\n              <Suspense>\n\n                <PublicRoute exact path=\"/\">\n                <HomeView />\n                </PublicRoute>\n                \n                <PublicRoute\n                exact\n                path=\"/login\"\n                restricted\n                redirectTo=\"/contacts\">\n                <LoginView />\n                </PublicRoute>\n                \n                <PublicRoute\n                exact\n                path=\"/register\"\n                restricted\n                redirectTo=\"/contacts\">\n                <RegisterView />\n                </PublicRoute>\n                \n                <PrivateRoute path=\"/contacts\" redirectTo=\"/register\">\n                  <ContactsView />\n                </PrivateRoute>\n                \n            </Suspense>\n          </Switch>\n        </Fragment>\n      )}\n    </Container>\n  );\n};\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport {store,persistor} from \"./redux/store\";\nimport \"./index.css\";\n// import App from \"./components/App/App.jsx\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n      <BrowserRouter>\n      <App />\n      </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}